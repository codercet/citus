--
-- MULTI_MULTIUSERS
--
-- Test user permissions.
--
-- print whether we're using version > 10 to make version-specific tests clear
SHOW server_version \gset
SELECT substring(:'server_version', '\d+')::int > 10 AS version_above_ten;
 version_above_ten 
-------------------
 f
(1 row)

SET citus.next_shard_id TO 1420000;
ALTER SEQUENCE pg_catalog.pg_dist_jobid_seq RESTART 1420000;
SET citus.shard_replication_factor TO 1;
CREATE TABLE test (id integer, val integer);
SELECT create_distributed_table('test', 'id');
 create_distributed_table 
--------------------------
 
(1 row)

CREATE TABLE test_coloc (id integer, val integer);
SELECT create_distributed_table('test_coloc', 'id', colocate_with := 'none');
 create_distributed_table 
--------------------------
 
(1 row)

SET citus.shard_count TO 1;
CREATE TABLE singleshard (id integer, val integer);
SELECT create_distributed_table('singleshard', 'id');
 create_distributed_table 
--------------------------
 
(1 row)

-- turn off propagation to avoid Enterprise processing the following section
SET citus.enable_ddl_propagation TO off;
CREATE USER full_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER read_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER no_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
GRANT ALL ON TABLE test TO full_access;
GRANT SELECT ON TABLE test TO read_access;
SET citus.enable_ddl_propagation TO DEFAULT;
\c - - - :worker_1_port
CREATE USER full_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER read_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER no_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
GRANT ALL ON TABLE test_1420000 TO full_access;
GRANT SELECT ON TABLE test_1420000 TO read_access;
GRANT ALL ON TABLE test_1420002 TO full_access;
GRANT SELECT ON TABLE test_1420002 TO read_access;
\c - - - :worker_2_port
CREATE USER full_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER read_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
CREATE USER no_access;
NOTICE:  not propagating CREATE ROLE/USER commands to worker nodes
HINT:  Connect to worker nodes directly to manually create all necessary users and roles.
GRANT ALL ON TABLE test_1420001 TO full_access;
GRANT SELECT ON TABLE test_1420001 TO read_access;
GRANT ALL ON TABLE test_1420003 TO full_access;
GRANT SELECT ON TABLE test_1420003 TO read_access;
\c - - - :master_port
-- create prepare tests
PREPARE prepare_insert AS INSERT INTO test VALUES ($1);
PREPARE prepare_select AS SELECT count(*) FROM test;
-- not allowed to read absolute paths, even as superuser
COPY "/etc/passwd" TO STDOUT WITH (format transmit);
ERROR:  absolute path not allowed
-- not allowed to read paths outside pgsql_job_cache, even as superuser
COPY "postgresql.conf" TO STDOUT WITH (format transmit);
ERROR:  path must be in the pgsql_job_cache directory
-- check full permission
SET ROLE full_access;
EXECUTE prepare_insert(1);
EXECUTE prepare_select;
 count 
-------
     1
(1 row)

INSERT INTO test VALUES (2);
SELECT count(*) FROM test;
 count 
-------
     2
(1 row)

SELECT count(*) FROM test WHERE id = 1;
 count 
-------
     1
(1 row)

SET citus.task_executor_type TO 'task-tracker';
SELECT count(*), min(current_user) FROM test;
 count |     min     
-------+-------------
     2 | full_access
(1 row)

-- test re-partition query (needs to transmit intermediate results)
SELECT count(*) FROM test a JOIN test b ON (a.val = b.val) WHERE a.id = 1 AND b.id = 2;
 count 
-------
     0
(1 row)

-- should not be able to transmit directly
COPY "postgresql.conf" TO STDOUT WITH (format transmit);
ERROR:  operation is not allowed
HINT:  Run the command with a superuser.
SET citus.task_executor_type TO 'real-time';
-- should not be able to transmit directly
COPY "postgresql.conf" TO STDOUT WITH (format transmit);
ERROR:  operation is not allowed
HINT:  Run the command with a superuser.
-- create a task that other users should not be able to inspect
SELECT task_tracker_assign_task(1, 1, 'SELECT 1');
 task_tracker_assign_task 
--------------------------
 
(1 row)

-- check read permission
SET ROLE read_access;
EXECUTE prepare_insert(1);
ERROR:  permission denied for relation test
EXECUTE prepare_select;
 count 
-------
     2
(1 row)

INSERT INTO test VALUES (2);
ERROR:  permission denied for relation test
SELECT count(*) FROM test;
 count 
-------
     2
(1 row)

SELECT count(*) FROM test WHERE id = 1;
 count 
-------
     1
(1 row)

SET citus.task_executor_type TO 'task-tracker';
SELECT count(*), min(current_user) FROM test;
 count |     min     
-------+-------------
     2 | read_access
(1 row)

-- test re-partition query (needs to transmit intermediate results)
SELECT count(*) FROM test a JOIN test b ON (a.val = b.val) WHERE a.id = 1 AND b.id = 2;
 count 
-------
     0
(1 row)

-- should not be able to transmit directly
COPY "postgresql.conf" TO STDOUT WITH (format transmit);
ERROR:  operation is not allowed
HINT:  Run the command with a superuser.
-- should not be able to access tasks or jobs belonging to a different user
SELECT task_tracker_task_status(1, 1);
ERROR:  could not find the worker task
DETAIL:  Task jobId: 1 and taskId: 1
SELECT task_tracker_assign_task(1, 2, 'SELECT 1');
ERROR:  must be owner of schema pg_merge_job_0001
SELECT task_tracker_cleanup_job(1);
ERROR:  must be owner of schema pg_merge_job_0001
-- should not be allowed to take aggressive locks on table
BEGIN;
SELECT lock_relation_if_exists('test', 'ACCESS SHARE');
 lock_relation_if_exists 
-------------------------
 t
(1 row)

SELECT lock_relation_if_exists('test', 'EXCLUSIVE');
ERROR:  permission denied for relation test
ABORT;
SET citus.task_executor_type TO 'real-time';
-- check no permission
SET ROLE no_access;
EXECUTE prepare_insert(1);
ERROR:  permission denied for relation test
EXECUTE prepare_select;
ERROR:  permission denied for relation test
INSERT INTO test VALUES (2);
ERROR:  permission denied for relation test
SELECT count(*) FROM test;
ERROR:  permission denied for relation test
SELECT count(*) FROM test WHERE id = 1;
ERROR:  permission denied for relation test
SET citus.task_executor_type TO 'task-tracker';
SELECT count(*), min(current_user) FROM test;
ERROR:  permission denied for relation test
-- test re-partition query
SELECT count(*) FROM test a JOIN test b ON (a.val = b.val) WHERE a.id = 1 AND b.id = 2;
ERROR:  permission denied for relation test
-- should not be able to transmit directly
COPY "postgresql.conf" TO STDOUT WITH (format transmit);
ERROR:  operation is not allowed
HINT:  Run the command with a superuser.
SET citus.task_executor_type TO 'real-time';
-- should be able to use intermediate results as any user
BEGIN;
SELECT create_intermediate_result('topten', 'SELECT s FROM generate_series(1,10) s');
 create_intermediate_result 
----------------------------
                         10
(1 row)

SELECT * FROM read_intermediate_result('topten', 'binary'::citus_copy_format) AS res (s int) ORDER BY s;
 s  
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
(10 rows)

END;
-- as long as we don't read from a table
BEGIN;
SELECT create_intermediate_result('topten', 'SELECT count(*) FROM test');
ERROR:  permission denied for relation test
ABORT;
SELECT * FROM citus_stat_statements_reset();
ERROR:  permission denied for function citus_stat_statements_reset
-- should not be allowed to upgrade to reference table
SELECT upgrade_to_reference_table('singleshard');
ERROR:  must be owner of relation singleshard
-- should not be allowed to co-located tables
SELECT mark_tables_colocated('test', ARRAY['test_coloc'::regclass]);
ERROR:  must be owner of relation test
-- table owner should be the same on the shards, even when distributing the table as superuser
SET ROLE full_access;
CREATE TABLE my_table (id integer, val integer);
RESET ROLE;
SELECT create_distributed_table('my_table', 'id');
 create_distributed_table 
--------------------------
 
(1 row)

SELECT result FROM run_command_on_workers($$SELECT tableowner FROM pg_tables WHERE tablename LIKE 'my_table_%' LIMIT 1$$);
   result    
-------------
 full_access
 full_access
(2 rows)

SELECT task_tracker_cleanup_job(1);
 task_tracker_cleanup_job 
--------------------------
 
(1 row)

DROP TABLE my_table, singleshard, test, test_coloc;
DROP USER full_access;
DROP USER read_access;
DROP USER no_access;
